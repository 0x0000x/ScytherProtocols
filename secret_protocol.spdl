# Defined types
usertype Timestamp;
usertype Data; 
usertype publicKey; 
usertype XOR;
usertype Key;

usertype License;
usertype Problem;
usertype Message;
usertype ControlMessage;


# Declared h functions
hashfunction h;
const pk2: Function;
secret sk2: Function;
inversekeys(pk2, sk2);




protocol SecureProtocol(Vehicle,RSU,Operation911)
{ 

    
    # Vehicle role
   role Vehicle
   {

    fresh license: License;
    fresh problem: Problem;
    fresh ts1: Timestamp;

 //   fresh dk: publicKey;    // Share security

    //var ack: Nonce;

    const m1: Message;


   // First, the vehicle sends the license and problem using h function

   send_1(Vehicle, RSU, {license, problem, h(ts1)});

   send_2(Vehicle, RSU, {Message(m1)}pk(RSU));


  // recv_2(RSU, Vehicle,  {Message(Vehicle)}pk(Vehicle));


    # Step 1: Vehicle sends hed license, problem, and timestamp 1 along with share security to RSU
    

    // Step 1: Vehicle sends hed license, problem, and timestamp 1 along with share security to RSU
    //send_1(Vehicle, RSU, {Vehicle,{LC, PLM, TS1}sk(Vehicle)}pk(RSU));
   
    
    //recv_2(RSU,Vehicle,{RSU, XOR(LC,PLM,TS2),TS1}pk(Vehicle));
 

    // Step 3: Vehicle receives acknowledgment from RSU and Operation911
    //recv_4(Operation911, Vehicle, {dk}pk(Operation911,Vehicle));
    claim(Vehicle, Secret, ts1);
    claim(Vehicle,Niagree);
    claim(Vehicle,Nisynch);
//    claim(Vehicle,Commit,RSU,license,problem,h(ts1));

    }


    # RSU role
    role RSU
    {


      var ts1: Timestamp;
       fresh ts2: Timestamp;

        var license: License;
        var problem: Problem;


   // var dk: publicKey;    // Share security
  //  var ack: Nonce;
  var m: Nonce;
   var m1: Message;



    # Step 1: RSU receives message from Vehicle, checks h and timestamp 1
     recv_1(Vehicle, RSU,  {license, problem, h(ts1),Message(m1)}pk(RSU));
      //claim(RSU,Running,Vehicle, ts1);
    match(m, (license, problem, h(ts1)));

    

    # Step 3: RSU sends messages to Operation911 and Vehicle
    send_2(RSU, Operation911,{license,problem,h(ts2),Message(RSU)}pk(Operation911));
   //  send_3(RSU, Operation911, {RSU,license, problem, h(ts2)}pk(Operation911));
    claim(RSU,Running,Vehicle, RSU);


    // Step 1: RSU receives message from Vehicle, checks h and timestamp 1, then forwards to Operation911
 //   recv_1(Vehicle, RSU, {Vehicle,{LC, PLM, TS1}sk(Vehicle)}pk(RSU));
    //send_2(RSU, Operation911, {h(lc, plm, ts1), sk(dk)}pk(RSU,Operation911));
    //recv_3(Operation911, RSU, {Operation911,sk(dk)}pk(Operation911,RSU));

   // send_2(RSU,Vehicle,{RSU, XOR(LC,PLM,TS2),TS1}pk(Vehicle));

    //var Message: Data;
   //recv_1(Vehicle, RSU, {Vehicle,{Message}sk(Vehicle),LC, PLM, TS1}TS1(Vehicle,RSU),h(Message));


    //claim(RSU, Secret,h(ts1));
    claim(RSU, Secret, ts1);
    claim(RSU,Niagree);
    claim(RSU,Nisynch);
    }

# Operation911 role
    role Operation911
    {
 var ts2: Timestamp;    // Timestamp 2
   // var ts1: Timestamp;      // Timestamp 1

   // var dk: publicKey;    // Share security

  //  var lc: Nonce;     // License
  //  var plm: Nonce;    // Problem
  var license: License;
        var problem: Problem;


    // Step 2: Operation911 receives message from RSU, checks h and timestamp 2
     recv_2(RSU, Operation911,{license,problem,h(ts2),Message(RSU)}pk(Operation911));
     // match(ts2, h(ts2));



    // Step 3: Operation911 acknowledges all share security for vehicle and RSU using Shamir secret sharing
  

    //Step 4: Operation911 decrypts the shares and sends acknowledgment to RSU and Vehicle
 //   send_3(Operation911, RSU,{Operation911, sk(dk)}pk(Operation911,RSU));
 //   send_4(Operation911, Vehicle, {dk}pk(Operation911,Vehicle));
    
    
   
    claim(Operation911,Niagree);
    claim(Operation911,Nisynch);
     claim(Operation911,Commit,RSU,Vehicle);
    }


}