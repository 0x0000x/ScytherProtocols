
// Scyther protocol for Shamir
secret authentication;

hashfunction h;

usertype Timestamp;
usertype ControlKey;

usertype XOR;

protocol ShamirSharingKey(V,RS,RA){

    role V {

        fresh lc,pl:Nonce;
        secret m: Nonce;

        fresh t: Timestamp;

        send_1(V,RS,lc,pl,h(t),{{m,h(t)}pk(V,RS)}sk(V));

        var ack;
        secret a;
        recv_4(RS,V,{ack,h(t)}sk(RS));
        // send_5(V,RS,a);
        // match(ack,ack);
        claim(V, Secret,m);
        claim(V,Niagree);
        claim(V,Nisynch);

    }

    role RS {
        var lc,pl,m: Nonce;

        var m:Nonce;
        var t: Timestamp;
        var ack: ControlKey;

        recv_1(V,RS,lc,pl,h(t),{{m,h(t)}pk(V,RS)}sk(V));
        
        const m2: Nonce;
        send_2(RS,RA,lc,pl,h(t),{{{m}k(RS,RA),m2}pk(RS,RA),h(t)}sk(RS));
        // recv_3(RA,RS,{ack}pk(RS));
        recv_3(RA,RS,{ack,h(t)}k(RA,RS));
        
        send_4(RS,V,{ack,h(t)}sk(RS));
        claim(RS,Secret,ack);

        // match(h(t),h(t));
        
        // var a;
        // recv_5(V,RS,a);
        


        claim(RS,Niagree);
        claim(RS,Nisynch);
    }


    role RA {

        var lc,pl,m,m2:Nonce;
        var t:Timestamp;
        recv_2(RS,RA,lc,pl,h(t),{{{m}k(RS,RA),m2}pk(RS,RA),h(t)}sk(RS));
        match(h(t),h(t));
 
        fresh ack: ControlKey;
        send_3(RA,RS,{ack,h(t)}k(RA,RS));
        
       

        // claim(RA,Secret,h(h(t)));

        claim(RA,Niagree);
        claim(RA,Nisynch);

    }
}