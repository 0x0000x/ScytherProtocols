
// Scyther protocol for Shamir
secret authentication;

hashfunction h;

const vShare: Nonce;
const rShare: Nonce;

usertype Timestamp;
usertype ControlKey;

protocol ShamirSharingKey(V,RS,RA){

    role V {
        fresh lc,pl:Nonce;
        const m: Nonce;

        fresh t: Timestamp;

        send_1(V,RS,lc,pl,h(t),{m}pk(RS));

        const ack;
        recv_4(RS,V,{ack}pk(V));
        match(ack,ack);
        claim(V, Secret,m);
        claim(V,Niagree);
        claim(V,Nisynch);

    }

    role RS {
        const lc,pl,m,t,ack;

        fresh t2: Timestamp;


        recv_1(V,RS,lc,pl,h(t),{m}pk(RS));
        match(h(t),h(t));
        
        const m2: Nonce;
        send_2(RS,RA,lc,pl,h(t2),{m,m2}pk(RA));
        recv_3(RA,RS,{ack}pk(RS));
        claim(RS,Secret,ack);
        send_4(RS,V,{ack}pk(V));


        claim(RS,Niagree);
        claim(RS,Nisynch);
    }


    role RA {

        var lc,pl,m,m2,t2;
        recv_2(RS,RA,lc,pl,h(t2),{m,m2}pk(RA));
        match(RS,h(t2));
 
        fresh ack: ControlKey;
        send_3(RA,RS,{ack}pk(RS));
       

        claim(RA,Secret,h(h(t2)));

        claim(RA,Niagree);
        claim(RA,Nisynch);

    }
}